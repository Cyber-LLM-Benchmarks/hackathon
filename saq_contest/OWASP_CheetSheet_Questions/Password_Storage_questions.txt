Below are 10 questions along with detailed answers that cover the key concepts and best practices from the Password Storage Cheat Sheet:

──────────────────────────────
1. QUESTION: What is the primary reason that passwords should be hashed rather than encrypted when stored for authentication?

ANSWER: Hashing is favored over encryption because it is a one‐way function. When a password is hashed, it is transformed into an output from which it is computationally infeasible (or “impossible” in practical terms) to recover the original plaintext password. This ensures that even if an attacker gains access to the stored hashes, they cannot simply reverse the hashing process to obtain the actual passwords. In contrast, encryption is a reversible process, meaning that if an attacker obtains both the encrypted data and the decryption key, they can recover the plaintext data. Since password storage does not require the ability to decrypt the password, hashing provides a more secure approach for protecting password data.

──────────────────────────────
2. QUESTION: How do salts enhance password security, and why are they important in preventing certain types of attacks?

ANSWER: A salt is a unique and randomly generated string appended to each password before hashing. The primary function of a salt is to ensure that even if two users have the same password, their hashed values will differ. This differentiation is crucial for a couple of reasons:
 • It forces an attacker to target each password hash individually rather than using a single precomputed lookup or rainbow table to attack multiple hashes at once.
 • Precomputed tables or rainbow tables become ineffective because the salt randomizes the input, hence an attacker would have to compute a new hash table for every salt value.
In effect, salts add a layer of defense by dramatically increasing the computational effort required for offline brute-force attacks.

──────────────────────────────
3. QUESTION: What is a “pepper” in password management, and how does it differ from a salt?

ANSWER: A pepper is an additional secret value used in the password hashing process. Unlike a salt, which is unique for each user and stored alongside the hash, the pepper is a shared secret that is not stored in the database but held separately in a secure location such as a secrets vault or hardware security module (HSM). Its primary use is to provide defense in depth; even if an attacker compromises the database and obtains all the hashed passwords and salts, they still need the pepper to effectively crack the passwords. Although peppering does not affect the configuration of the password hashing algorithm itself, it adds an extra barrier against offline cracking attempts.

──────────────────────────────
4. QUESTION: What are work factors in the context of password hashing, and why is it important to adjust them over time?

ANSWER: The work factor indicates how computationally intensive the process of hashing a password is. It typically represents the number of iterations (or an exponential factor such as 2^work) applied during the hashing process. The higher the work factor, the longer it takes to compute each hash, which in turn slows down an attacker’s ability to perform brute-force or dictionary attacks. Adjusting the work factor is important because hardware continues to improve in power over time. What may have been a sufficient work factor a few years ago could become inadequate as attackers gain access to faster computing resources. Therefore, it is recommended to upgrade the work factor over time—potentially during user login events—so that stored hashes remain resistant to evolving attack capabilities while balancing the computational cost on legitimate users.

──────────────────────────────
5. QUESTION: Describe the recommended parameters for using Argon2id for password hashing.

ANSWER: Argon2id is currently recommended as best practice for password hashing because it offers a balanced defense against both side-channel attacks and GPU-based cracking attempts. The cheat sheet suggests several equally defensible configuration settings. For instance, one recommendation is to use:
 • Memory (m): 19 MiB
 • Iteration count (t): 2
 • Degree of parallelism (p): 1
Other parameter options include using higher memory with lower iterations or vice versa. These settings are designed to increase both CPU and memory costs for each hash computation so that attackers have to expend significantly more resources to attempt an offline crack.

──────────────────────────────
6. QUESTION: When would you use scrypt instead of Argon2id, and what are its recommended configuration settings?

ANSWER: scrypt is recommended for password hashing when Argon2id is not available in your programming environment or framework. Like Argon2id, scrypt is designed to be resource-intensive, employing both CPU and memory cost parameters to hinder brute-force attacks. A strong configuration recommendation from the cheat sheet is:
 • N (CPU/memory cost): 2^17 (which corresponds to about 128 MiB of memory usage)
 • Block size (r): 8 (i.e., 1024 bytes)
 • Parallelization parameter (p): 1
Additional settings provide trade-offs between CPU and memory usage. By configuring these parameters properly, scrypt increases the overall computational work required to verify each hash, thereby strengthening password storage security for environments where Argon2id isn’t an option.

──────────────────────────────
7. QUESTION: What are the specific considerations and limitations when using bcrypt for password hashing?

ANSWER: bcrypt is considered a legacy option and should only be used in systems where modern algorithms like Argon2id or scrypt are not available. There are several key considerations when using bcrypt:
 • Work Factor: You should use a work factor of 10 or higher, balancing security with the server’s performance.
 • Input Length Limit: bcrypt has an input limit of 72 bytes for the password. This means that the system should enforce a maximum password length of 72 bytes (or less for certain implementations) to avoid any truncation and potential security issues.
 • Pre-hashing: Some systems attempt to pre-hash passwords (using SHA-2 or similar algorithms) before passing them to bcrypt. However, this practice is risky due to potential issues like null-byte handling and “password shucking,” where collisions can be exploited. If pre-hashing is necessary, extra care (such as encoding with Base64 and using a pepper) should be taken.
Because of these challenges, bcrypt is best used as a fallback solution only when more modern algorithms are unavailable or impractical to implement.

──────────────────────────────
8. QUESTION: How is PBKDF2 configured to ensure compliance with FIPS-140, and what iteration counts are recommended for various hash functions used within PBKDF2?

ANSWER: PBKDF2 is frequently used in environments that require FIPS-140 compliance since it has validated implementations that meet FIPS criteria. The configuration of PBKDF2 involves selecting an internal HMAC hash function, with HMAC-SHA-256 being commonly recommended. The work factor in PBKDF2 is implemented through an iteration count—the number of times the underlying HMAC is applied—which significantly slows down the hashing process for an attacker. The cheat sheet provides recommended iteration counts based on the internal hash:
 • PBKDF2-HMAC-SHA1: 1,300,000 iterations
 • PBKDF2-HMAC-SHA256: 600,000 iterations
 • PBKDF2-HMAC-SHA512: 210,000 iterations
These recommendations ensure that even with rapid modern computing power, an attacker will face substantial computational hurdles in brute-forcing a hashed password.

──────────────────────────────
9. QUESTION: What are the potential risks associated with pre-hashing passwords, particularly when using bcrypt, and how can these risks be mitigated?

ANSWER: Pre-hashing involves applying a fast hash function (like SHA-2) to the password before passing it to a slower algorithm like bcrypt. This can be dangerous for several reasons:
 • Null Byte Handling: Many implementations of bcrypt expect a null-terminated string. If the output of the pre-hash contains a null byte early in its sequence, bcrypt might ignore the remainder of the string, resulting in a hash of only part of the value.
 • Password Shucking: This refers to a situation where an attacker can precompute the output of the pre-hash to reduce the effective security of the overall scheme, especially if the same pre-hashed password is used in multiple systems.
To mitigate these risks, one recommended strategy is to compute an HMAC (such as HMAC-SHA384) over the password using a pepper as the key, encode the result (for example, with Base64), and then pass it to bcrypt. This approach helps to ensure that the complete and intended byte sequence is used, prevents early termination due to null bytes, and adds an extra layer of secret protection by incorporating the pepper.

──────────────────────────────
10. QUESTION: What are the methods for upgrading legacy password hashes, and why is it important to transition away from older hashing algorithms?

ANSWER: Legacy password hashes, such as those generated using MD5, SHA-1, or similarly weak algorithms, are more susceptible to modern cracking techniques and can be exploited if exposed. The cheat sheet outlines two primary methods for upgrading these legacy hashes:
 • Expire and Reset: Identify users who have not logged in for an extended period and expire their existing passwords, compelling them to reset their passwords upon next login. This method enhances security immediately but may be disruptive to user experience.
 • Layering/Hybrid Hashing: Use the existing legacy hash as input to a more secure hash function. For example, if an application stores passwords as md5(password), you can upgrade them to bcrypt(md5(password)). However, this method has potential risks such as making hashes easier to crack if not done carefully, so it’s only a temporary measure until users log in and the system can re-hash the original password using the improved algorithm.
Transitioning away from legacy algorithms is critical because it minimizes the window during which stored credentials could be compromised. Allowing a mix of algorithms during the transition period is possible if metadata is stored alongside passwords (using, for example, the modular PHC string format), but it is imperative to upgrade the hashing mechanisms as quickly as practical to maintain strong security over time.

──────────────────────────────
These questions and answers are designed to cover the essential elements of password storage best practices, including the rationale behind hashing, the use of salts and peppers, algorithm-specific configurations, and strategies for securely transitioning away from outdated methods.