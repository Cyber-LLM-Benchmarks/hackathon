Below are 10 in-depth questions along with detailed answers based on the provided Clickjacking Defense Cheat Sheet.

─────────────────────────────  
1. What are the three primary mechanisms for defending against Clickjacking attacks, and how do they differ?

Answer:  
The cheat sheet outlines three independent mechanisms:
 • Using HTTP response headers such as X-Frame-Options and the Content Security Policy (CSP) frame-ancestors directive prevents a browser from loading pages in frames or iframes unless explicitly allowed by policy.  
 • Employing the SameSite attribute on cookies restricts session cookies from being sent when a page is loaded in a frame, thereby mitigating attacks that rely on user authentication.  
 • Implementing a JavaScript-based “frame-buster” (also called a frame breaking script) within the page can detect when the page is framed and force it out – although this method is less reliable, especially with modern bypass techniques.  
Each of these methods works at different levels (HTTP response headers, cookie control, and client-side code) and using them together adds defense in depth.

─────────────────────────────  
2. How does the Content Security Policy (CSP) frame-ancestors directive help in preventing Clickjacking?

Answer:  
The CSP frame-ancestors directive instructs browsers regarding which origins are permitted to embed the page within a frame or iframe. By setting a directive such as "frame-ancestors 'none';", developers can prevent any domain from framing the page. Alternatively, using "frame-ancestors 'self';" restricts framing to pages from the same origin. This directive is an effective tool because it allows for granular control over which domains have rights to embed the content. It leverages the browser’s CSP enforcement and can specify multiple source expressions using the standard CSP format. However, it’s important to note that in some browsers (e.g., older versions of Chrome and Firefox) the X-Frame-Options header may take precedence over the CSP directive.

─────────────────────────────  
3. What are some common ways to configure the frame-ancestors directive in CSP, and what do these examples mean?

Answer:  
Common configurations include:
 • Content-Security-Policy: frame-ancestors 'none';  
  – This setting completely disables framing, ensuring that no domain can embed the page.  
 • Content-Security-Policy: frame-ancestors 'self';  
  – Only the same origin (the current site) is allowed to embed the page in a frame or iframe.  
 • Content-Security-Policy: frame-ancestors 'self' *.somesite.com https://myfriend.site.com;  
  – This more complex example allows the current site, all subdomains or pages on somesite.com (regardless of protocol), and a specific HTTPS site (myfriend.site.com) to frame the page.  
The use of single quotes is required around values like 'self' and 'none', while other source expressions may not need them. These examples provide flexibility in controlling where your content can be embedded to mitigate clickjacking risks.

─────────────────────────────  
4. What limitations or browser compatibility issues exist with using CSP frame-ancestors for clickjacking protection?

Answer:  
While the CSP frame-ancestors directive offers granular control, there are several limitations:
 • Browser Preference: The specification states that if a page is delivered with both CSP frame-ancestors and X-Frame-Options headers, then the X-Frame-Options header must be ignored if the CSP policy is set to “enforce”. However, in practice, browsers like Chrome (from version 40) and Firefox (from version 35) may ignore the CSP directive and follow the X-Frame-Options header instead.  
 • Browser Support: Although modern browsers largely support the directive, compatibility issues exist with older browsers or certain versions that do not fully implement the CSP standard.  
Overall, because of these inconsistencies, it is recommended to use multiple layers (e.g., combining with X-Frame-Options) to provide defense in depth.

─────────────────────────────  
5. How does the X-Frame-Options header protect against Clickjacking and what values can be set?

Answer:  
The X-Frame-Options HTTP response header instructs the browser whether a page should be allowed to be rendered within a frame or iframe. It has three values:
 • DENY: Prevents any domain from framing the content. This is the most secure option.  
 • SAMEORIGIN: Only allows framing if the embedding page is from the same origin as the content.  
 • ALLOW-FROM uri: Permits a specific URI to frame the content; however, this option is considered obsolete and is not supported in modern browsers.  
Setting this header at the server level is crucial because it must be sent as part of the HTTP response for HTML content. If multiple X-Frame-Options headers are present, browsers typically only honor one, and mistakes in its usage can lead to insecure fallback behavior.

─────────────────────────────  
6. What are some common mistakes to avoid when implementing the X-Frame-Options header, and how can proper implementation be ensured?

Answer:  
Common mistakes include:
 • Using meta tags (e.g., <meta http-equiv="X-Frame-Options" content="deny">) instead of setting the header in the HTTP response. Meta tags are not effective for this purpose.  
 • Relying solely on the ALLOW-FROM directive, which is now obsolete and may not be supported; if the browser does not recognize this, the protection fails.  
 • Failing to apply the header to every page containing HTML content, which may create loopholes.  
Proper implementation involves configuring the web server (or using an application filter or WAF) to attach a consistent X-Frame-Options header (preferably using DENY or SAMEORIGIN) to all relevant responses, avoiding multiple contradictory headers, and testing across different browsers for compatibility.

─────────────────────────────  
7. How do SameSite cookies help prevent Clickjacking and what are their limitations?

Answer:  
SameSite is a cookie attribute that can be set to either 'strict' or 'lax'. When applied:
 • Cookies with SameSite='strict' or 'lax' are not sent in requests initiated from a different origin, such as when a page is loaded within an iframe from another domain.  
 • This means that even if an attacker manages to frame a victim site, session cookies will not be sent along with the request, reducing the likelihood that an authenticated session can be exploited.  
However, limitations include:
 • If a clickjacking attack does not depend on an authenticated session (for example, if it doesn’t require the user’s session cookie), then SameSite cookies won’t provide protection.  
 • A small percentage of users (around 6% as of the last analysis) may use browsers that do not support the SameSite attribute fully.  
Thus, while useful as an additional layer, SameSite cookies should not be the sole defense and must be used in conjunction with other measures.

─────────────────────────────  
8. What is the role of a legacy browser frame-breaking script (frame-buster) and how is it correctly implemented?

Answer:  
A legacy browser frame-breaking script is intended to prevent the webpage from being loaded inside a frame by using client-side JavaScript. The correct implementation, as described in the cheat sheet, involves:
 • Inserting a style element that initially hides the page (e.g., <style id="antiClickjack"> body {display:none !important;} </style>).  
 • Immediately afterward, placing a script that checks whether the current window (self) is the top window. If it is, the script removes the hiding style element so that the page is displayed normally. If not, it forces the top-level window to navigate to the current page’s URL.  
Example code:
  – In HEAD, include the style block with an id.
  – Then, include the JavaScript:  
    if (self === top) { remove the antiClickjack style } else { top.location = self.location; }  
This approach works for legacy browsers but is less effective than header-based defenses because it relies on JavaScript execution—which can be disabled—and has been found to be bypassable by more sophisticated framing attacks.

─────────────────────────────  
9. In which scenarios might using a window.confirm() prompt serve as a partial defense against Clickjacking, and what are its shortcomings?

Answer:  
Using window.confirm() offers a more interactive approach when the page must be allowed to be framed. Its role is to alert the user by producing a modal dialog box that cannot be easily framed, warning them of a potential clickjacking action. The dialog displays the origin of the script in most browsers, thereby giving the user contextual information. For instance, when trying to delete an account, a prompt can ask, “Are you sure you want to delete your youtube account?”  
However, there are significant shortcomings:
 • The protection is only partial because it depends on user interaction and awareness rather than enforcing a technical boundary.  
 • In Internet Explorer, the dialog box might not display the domain information, reducing its effectiveness.  
 • If an attacker can control aspects of the framing, the window.confirm() prompt might be manipulated or its message obfuscated.  
Thus, while it can add an extra layer of defense in edge cases (such as content that legally must be framed), it should not be relied upon as the primary means of protection against clickjacking.

─────────────────────────────  
10. What are some reasons why simple frame-busting scripts (like the insecure non-working snippet provided) fail to protect against Clickjacking?

Answer:  
The cheat sheet describes several ways in which simple frame-busting scripts can be circumvented:
 • Double Framing: If an attacker frames the victim page inside multiple iframes (a double frame), scripts attempting to bust out by setting parent.location may run into cross-domain security restrictions due to descendant frame navigation policies, which can render the script ineffective.  
 • onBeforeUnload Exploitation: An attacker might register an onBeforeUnload event on the top frame that repeatedly prompts the user to cancel navigation, thereby preventing the frame-busting script from succeeding. This tactic can even force the navigation request to cancel by using rapid, repetitive navigation attempts (e.g., redirecting to a no-content page).  
 • Clobbering top.location: On some browsers (like IE7 or early Safari versions), the attacker can overwrite the top.location variable, thus preventing the victim’s script from reading or modifying it to break out of the frame.  
 • Exploitation of XSS Filters: Some browsers may disable inline scripts if an attacker is able to induce false positives in the built-in XSS filters, leading to the frame-busting script being blocked.  
 • Restricted Zones: An attacker can configure iframes with restrictions (using sandbox attributes or IE’s security flags) that disable JavaScript, thereby preventing any JavaScript-based frame-busting code from executing.  
These techniques highlight that simple JavaScript-based frame busting can be bypassed by attackers, which is why header-based solutions (such as X-Frame-Options or CSP frame-ancestors) are preferred for robust clickjacking protection.

─────────────────────────────  

Each question and answer pair above is designed to help ensure not only an understanding of different clickjacking defenses but also the nuances and limitations of each method.